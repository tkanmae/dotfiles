[[plugins]]
repo = 'Shougo/denite.nvim'
if = "has('nvim') || (v:version >= 800)"
on_cmd = ['Denite']
hook_source = 'source ~/.vim/rc/plugins/denite.rc.vim'
hook_add = '''
nnoremap [denite] <Nop>
nmap <Leader>u [denite]
" List file's directory.
nnoremap [denite]f :<C-u>Denite `finddir('.git', ';') != '' ? 'file/rec/git' : 'file/rec'`<CR>
" List buffers.
nnoremap [denite]b :<C-u>Denite buffer -buffer-name=buffer<CR>
" List recently used files.
nnoremap [denite]m :<C-u>Denite file_mru -buffer-name=file_mru<CR>
" List current directory.
nnoremap [denite]c :<C-u>Denite file -buffer-name=file<CR>
" List buffers and recently used files.
nnoremap [denite]u :<C-u>Denite buffer file_mru `finddir('.git', ';') != '' ? 'file/rec/git' : 'file/rec'`<CR>
" Grep
nnoremap [denite]g :<C-u>Denite grep:. -buffer-name=search-buffer<CR>
" Outline
nnoremap [denite]o :<C-u>Denite outline -no-quit<CR>
'''

[[plugins]]
repo = 'Shougo/unite.vim'
if = "v:version < 800"
on_cmd = ['Unite']
hook_source = 'source ~/.vim/rc/plugins/unite.rc.vim'
hook_add = '''
nnoremap [unite] <Nop>
nmap <Leader>u [unite]
" List file's directory.
nnoremap [unite]f :<C-u>UniteWithBufferDir -buffer-name=files file<CR>
" List buffers.
nnoremap [unite]b :<C-u>Unite buffer -buffer-name=buffer<CR>
" List recently used files.
nnoremap [unite]m :<C-u>Unite file_mru -buffer-name=file_mru<CR>
" List registers.
nnoremap [unite]r :<C-u>Unite -buffer-name=register register<CR>
" List current directory.
nnoremap [unite]c :<C-u>Unite file -buffer-name=file<CR>
" List buffers and recently used files.
nnoremap [unite]u :<C-u>Unite buffer file_mru file_rec<CR>
" Grep
nnoremap [unite]g :<C-u>Unite grep:. -buffer-name=search-buffer<CR>
" List outline.
nnoremap [unite]o :<C-u>Unite outline<CR>
'''


[[plugins]]
repo = 'raghur/fruzzy'
on_source = ['denite.nvim']
hook_source = '''
let g:fruzzy#sortonempty = 0
'''
hook_post_update = 'call fruzzy#install()'

[[plugins]]
repo = 'Shougo/neomru.vim'
on_source = ['unite.vim', 'denite.nvim']

[[plugins]]
repo = 'Shougo/unite-outline'
on_source = ['unite.vim']

[[plugins]]
repo = 'Shougo/deoplete.nvim'
depends = 'context_filetype.vim'
on_event = 'InsertEnter'
hook_source = '''
source ~/.vim/rc/plugins/deoplete.rc.vim
call deoplete#enable()
'''

[[plugins]]
repo = 'Shougo/defx.nvim'
hook_add = '''
nnoremap <silent> <Leader>fe
\ :<C-u>Defx -listed -resume -direction=topleft -split=vertical -winwidth=50<CR>
'''
[plugins.ftplugin]
defx = '''
" Define mappings
nnoremap <silent><buffer><expr> <CR>
\ defx#async_action('open')
nnoremap <silent><buffer><expr> l
\ defx#async_action('open')
nnoremap <silent><buffer><expr> E
\ defx#do_action('open', 'vsplit')
nnoremap <silent><buffer><expr> P
\ defx#do_action('open', 'pedit')
nnoremap <silent><buffer><expr> c
\ defx#do_action('copy')
nnoremap <silent><buffer><expr> m
\ defx#do_action('move')
nnoremap <silent><buffer><expr> p
\ defx#do_action('paste')
nnoremap <silent><buffer><expr> K
\ defx#do_action('new_directory')
nnoremap <silent><buffer><expr> N
\ defx#do_action('new_file')
nnoremap <silent><buffer><expr> d
\ defx#do_action('remove_trash')
nnoremap <silent><buffer><expr> r
\ defx#do_action('rename')
nnoremap <silent><buffer><expr> !
\ defx#do_action('execute_command')
nnoremap <silent><buffer><expr> x
\ defx#do_action('execute_system')
nnoremap <silent><buffer><expr> yy
\ defx#do_action('yank_path')
nnoremap <silent><buffer><expr> .
\ defx#do_action('toggle_ignored_files')
nnoremap <silent><buffer><expr> ;
\ defx#do_action('repeat')
nnoremap <silent><buffer><expr> h
\ defx#do_action('cd', ['..'])
nnoremap <silent><buffer><expr> ~
\ defx#do_action('cd')
nnoremap <silent><buffer><expr> \
\ defx#do_action('cd', getcwd())
nnoremap <silent><buffer><expr> w
\ defx#do_action('change_vim_cwd')
nnoremap <silent><buffer><expr> <Space>
\ defx#do_action('toggle_select') . 'j'
nnoremap <silent><buffer><expr> *
\ defx#do_action('toggle_select_all')
nnoremap <silent><buffer><expr> j
\ line('.') == line('$') ? 'gg' : 'j'
nnoremap <silent><buffer><expr> k
\ line('.') == 1 ? 'G' : 'k'
nnoremap <silent><buffer><expr> <C-l>
\ defx#do_action('redraw')
nnoremap <silent><buffer><expr> q
\ defx#do_action('quit')
'''

[[plugins]]
repo = 'Vimjas/vim-python-pep8-indent'
on_ft = ['python', 'python3']

[[plugins]]
repo = 'fisadev/vim-isort'
on_ft = ['python', 'python3']

[[plugins]]
repo = 'vim-jp/cpp-vim'
on_ft = ['c', 'cpp']

[[plugins]]
repo = 'Rip-Rip/clang_complete'
on_ft = ['c', 'cpp']
hook_add = '''
  if has("mac")
    let g:clang_library_path = "/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib"
  endif
  let g:clang_user_options = '-std=c++11'

'''

[[plugins]]
repo = 'fatih/vim-go'
on_ft = ['go']

[[plugins]]
repo = 'jalvesaq/Nvim-R'
on_ft = ['R']

[[plugins]]
repo = 'maverickg/stan.vim'
on_ft = ['stan']

# Indentation and syntax for Javascript
[[plugins]]
repo = 'pangloss/vim-javascript'
on_ft = ['javascript']

# Syntax for JSX
[[plugins]]
repo = 'mxw/vim-jsx'

[[plugins]]
repo = 'marijnh/tern_for_vim'
build = 'npm install'
on_ft = ['javascript']

[[plugins]]
repo = 'elzr/vim-json'
on_ft = ['json']
hook_add = '''
  let g:vim_json_syntax_conceal = 0
'''

[[plugins]]
repo = 'mustache/vim-mustache-handlebars'
on_ft = ['handlebars']

[[plugins]]
repo = 'othree/html5.vim'

[[plugins]]
repo = 'hail2u/vim-css3-syntax'

[[plugins]]
repo = 'groenewege/vim-less'
on_ft = ['less']

[[plugins]]
repo = 'mattn/emmet-vim'
on_ft = ['html', 'handlebars']

[[plugins]]
repo = 'Glench/Vim-Jinja2-Syntax'
on_ft = ['html']

[[plugins]]
repo = 'zaiste/tmux.vim'
on_ft = ['tmux']

[[plugins]]
repo = 'honza/dockerfile.vim'
on_ft = ['dockerfile']

[[plugins]]
repo = 'hashivim/vim-terraform'
on_ft = ['terraform']
hook_add = '''
  let g:terraform_fmt_on_save = 1
  let g:terraform_align = 1
'''

# Indentation and syntax for YAML
[[plugins]]
repo = 'mrk21/yaml-vim'
on_ft = ['toml']

# Syntax for YAML
[[plugins]]
repo = 'stephpy/vim-yaml'
on_ft = ['yaml']

[[plugins]]
repo = 'cespare/vim-toml'
on_ft = ['toml']

[[plugins]]
repo = 'tpope/vim-markdown'
on_ft = ['markdown']

[[plugins]]
repo = 'vim-pandoc/vim-pandoc'
on_ft = ['pandoc']

[[plugins]]
repo = 'LaTeX-Box-Team/LaTeX-Box'
on_ft = ['tex']
hook_add = '''
  let g:tex_flavor = "latex"
  let g:LatexBox_ref_pattern = '\c\\\a*ref\*\?\_\s*{'
  let g:LatexBox_viewer = "open -a Skim.app"
  let g:LatexBox_latexmk_preview_continuously = 1
  let g:LatexBox_split_width = 40
  let g:LatexBox_split_side = "rightbelow"
  let g:LatexBox_complete_inlineMath = 1
  map <silent> <Leader>ls :silent
        \ !/Applications/Skim.app/Contents/SharedSupport/displayline
        \ <C-R>=line('.')<CR> "<C-R>=LatexBox_GetOutputFile()<CR>"
        \ "%:p" <CR>
'''
