[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'osyo-manga/vim-precious'
depends = ['context_filetype.vim']

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'
merged = 0
hook_post_update = 'TSUpdate'
hook_add = '''
lua <<EOF
require'nvim-treesitter.configs'.setup {
  ensure_installed = "maintained",
  highlight = {
    enable = true
  },
  indent = {
    true
  }
}
EOF
'''

[[plugins]]
repo = 'hoob3rt/lualine.nvim'
hook_add = '''
lua <<EOF
require('lualine').setup{
  options = {
    theme = 'gruvbox',
    section_separators = {'', ''},
    component_separators = {'|', '|'},
    disabled_filetypes = {},
  },
  sections = {
    lualine_a = {'mode'},
    lualine_b = {'branch'},
    lualine_c = {
      {
        'filename',
        file_status = true,
        path = 0
      },
    },
    lualine_x = {
      {
        'diagnostics',
        sources = {"nvim_diagnostic"},
        symbols = {error = ' ', warn = ' ', info = ' ', hint = ' '}
      },
    },
    lualine_y = {'diff'},
    lualine_z = {'location'},
  },
  inactive_sections = {
    lualine_a = {},
    lualine_b = {},
    lualine_c = {'filename'},
    lualine_x = {'location'},
    lualine_y = {},
    lualine_z = {},
  },
  extensions = {'fugitive'},
  }
EOF
'''

[[plugins]]
repo = 'Shougo/neosnippet'
hook_add = '''
let g:neosnippet#snippets_directory = '~/.vim/snippets'
" SuperTab like snippets behavior.
imap <expr><TAB> neosnippet#expandable_or_jumpable() ?
      \ "\<Plug>(neosnippet_expand_or_jump)" : pumvisible() ? "\<C-n>" : "\<TAB>"
smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
      \ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
'''

[[plugins]]
repo = 'Shougo/neosnippet-snippets'
on_source = ['neosnippet']

[[plugins]]
repo = 'tpope/vim-abolish'

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'tpope/vim-repeat'

[[plugins]]
repo = 'thinca/vim-visualstar'

[[plugins]]
repo = 'jiangmiao/auto-pairs'

[[plugins]]
repo = 'tmhedberg/matchit'

[[plugins]]
repo = 'kana/vim-textobj-user'

[[plugins]]
repo = 'kana/vim-textobj-indent'
depends = 'vim-textobj-user'

[[plugins]]
repo = 'kana/vim-fakeclip'

[[plugins]]
repo = 'Konfekt/FastFold'

[[plugins]]
repo = 'scrooloose/nerdcommenter'
hook_add = '''
let NERDShutUp=1
let NERDSpaceDelims=1
'''

[[plugins]]
repo = 'junegunn/vim-easy-align'
hook_add = '''
  xmap ga <Plug>(EasyAlign)
  nmap ga <Plug>(EasyAlign)
'''

[[plugins]]
repo = 'LeafCage/yankround.vim'
hook_add = '''
  nmap p <Plug>(yankround-p)
  nmap P <Plug>(yankround-P)
  nmap <C-p> <Plug>(yankround-prev)
  nmap <C-n> <Plug>(yankround-next)
'''

[[plugins]]
repo = 'roxma/vim-hug-neovim-rpc'
on_if = "!has('nvim')"

[[plugins]]
repo = 'roxma/nvim-yarp'
on_if = "!has('nvim')"

[[plugins]]
repo = "neovim/nvim-lspconfig"
hook_add = '''
lua <<EOF
local nvim_lsp = require('lspconfig')

local on_attach = function(client, bufnr)
  local function buf_set_keymap(...) vim.api.nvim_buf_set_keymap(bufnr, ...) end
  local function buf_set_option(...) vim.api.nvim_buf_set_option(bufnr, ...) end

  buf_set_option('omnifunc', 'v:lua.vim.lsp.omnifunc')

  local opts = { noremap=true, silent=true }
  buf_set_keymap('n', 'gd', '<Cmd>lua vim.lsp.buf.definition()<CR>', opts)
  buf_set_keymap('n', 'gD', '<Cmd>lua vim.lsp.buf.definition()<CR>', opts)
  buf_set_keymap('n', 'gi', '<cmd>lua vim.lsp.buf.implementation()<CR>', opts)
  buf_set_keymap('n', 'gr', '<cmd>lua vim.lsp.buf.references()<CR>', opts)
  buf_set_keymap("n", "fm", "<cmd>lua vim.lsp.buf.formatting()<CR>", opts)
  buf_set_keymap('n', '[c', '<cmd>lua vim.lsp.diagnostic.goto_prev()<CR>', opts)
  buf_set_keymap('n', ']c', '<cmd>lua vim.lsp.diagnostic.goto_next()<CR>', opts)
end

vim.lsp.handlers["textDocument/publishDiagnostics"] = vim.lsp.with(
    vim.lsp.diagnostic.on_publish_diagnostics, { virtual_text = false }
)

nvim_lsp.pyright.setup{
  on_attach = on_attach
}
nvim_lsp.diagnosticls.setup{
  on_attach = on_attach
}
nvim_lsp.tsserver.setup {
  on_attach = on_attach,
  filetypes = { "typescript", "typescriptreact", "typescript.tsx" }
}
EOF
'''

[[plugins]]
repo = 'tami5/lspsaga.nvim'
hook_add = '''
nnoremap <silent>gh <cmd>lua require'lspsaga.provider'.lsp_finder()<CR>
nnoremap <silent>K <cmd>lua require('lspsaga.hover').render_hover_doc()<CR>
nnoremap <silent><C-k> <cmd>lua require('lspsaga.signaturehelp').signature_help()<CR>
nnoremap <silent>rn <cmd>lua require('lspsaga.rename').rename()<CR>
nnoremap <silent>[c <cmd>lua require'lspsaga.diagnostic'.lsp_jump_diagnostic_prev()<CR>
nnoremap <silent>]c <cmd>lua require'lspsaga.diagnostic'.lsp_jump_diagnostic_next()<CR>
'''

[[plugins]]
repo = 'nvim-lua/completion-nvim'
hook_add = '''
autocmd BufEnter * lua require'completion'.on_attach()

" Use <Tab> and <S-Tab> to navigate through popup menu
inoremap <expr> <Tab>   pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
" Set completeopt to have a better completion experience
set completeopt=menuone,noinsert,noselect
" Avoid showing message extra message when using completion
set shortmess+=c
'''

[[plugins]]
repo = 'sbdchd/neoformat'
hook_add = '''
augroup Format
  autocmd!
  autocmd BufWritePre * undojoin | Neoformat
augroup END
'''

[[plugins]]
repo = 'liuchengxu/vista.vim'
depends = ['lightline.vim']
hook_add = '''
let g:vista_sidebar_width = 40
let g:vista_icon_indent = ["▸ ", ""]
let g:vista#renderer#enable_icon = 0
'''

[[plugins]]
repo = 'nvim-lua/popup.nvim'

[[plugins]]
repo = 'nvim-lua/plenary.nvim'

[[plugins]]
repo = 'nvim-telescope/telescope.nvim'
hook_add = '''
nnoremap <leader>uf <cmd>lua require('telescope.builtin').find_files({ find_command = {'rg', '--files', '--hidden', '-g', '!.git' }})<cr>
nnoremap <leader>um <cmd>lua require('telescope.builtin').oldfiles()<cr>
nnoremap <leader>ug <cmd>lua require('telescope.builtin').live_grep()<cr>
nnoremap <leader>ub <cmd>lua require('telescope.builtin').buffers()<cr>
nnoremap <leader>us <cmd>lua require('telescope.builtin').treesitter()<cr>
'''

[[plugins]]
repo = 'kyazdani42/nvim-web-devicons'

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'airblade/vim-gitgutter'
hook_add = '''
let g:gitgutter_sign_removed = '-'
'''

[[plugins]]
repo = 'christoomey/vim-tmux-navigator'
hook_add = '''
let g:tmux_navigator_no_mappings = 1
nnoremap <silent> <C-t>h :TmuxNavigateLeft<cr>
nnoremap <silent> <C-t>j :TmuxNavigateDown<cr>
nnoremap <silent> <C-t>k :TmuxNavigateUp<cr>
nnoremap <silent> <C-t>l :TmuxNavigateRight<cr>
nnoremap <silent> <C-t>\ :TmuxNavigatePrevious<cr>
'''

[[plugins]]
repo = 'rizzatti/dash.vim'
if = "has('mac')"
hook_add = '''
let g:dash_map = {
\ 'python': ['python', 'numpy', 'scipy', 'pandas', 'matplotlib', 'pytorch', 'tensorflow']
\}
'''

[[plugins]]
repo = 'vim-scripts/sudo.vim'

[[plugins]]
repo = 'lifepillar/vim-solarized8'

[[plugins]]
repo = 'cocopon/iceberg.vim'

[[plugins]]
repo = 'rktjmp/lush.nvim'

[[plugins]]
repo = 'npxbr/gruvbox.nvim'
depends = ['rktjmp/lush.nvim']
hook_add = '''
set background=dark
autocmd vimrc VimEnter * nested colorscheme gruvbox
'''
