#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""Set the style of matplotlib.

Usage:
    mpl-theme list
    mpl-theme use <theme>

Options:
    -h, --help
        Show this message.

"""
from __future__ import division, print_function

import glob
import os
import sys
import docopt


THEME_DIR = '~/.matplotlib/rc'


def print_error_and_die(msg, err_code=-1):
    """Exits this program with a message."""
    print(msg, file=sys.stderr)
    sys.exit(err_code)


def normalize_path(path):
    """Return a normalized path."""
    return os.path.abspath(os.path.normpath(
        os.path.expanduser(os.path.expandvars(path))))


def create_symlink(src, dst):
    if not os.path.exists(src):
        print_error_and_die('File not found: %s' % src)

    if os.path.islink(dst):
        os.remove(dst)
    elif os.path.exists(dst):
        os.rename(dst, dst + '.orig')
    os.symlink(src, dst)


def list_themes():
    rc_file = normalize_path('~/.matplotlib/matplotlibrc')
    if os.path.islink(rc_file):
        current = os.path.basename(os.path.realpath(rc_file))
    else:
        current = ''

    dirname = normalize_path(THEME_DIR)
    themes = []
    for f in glob.glob(dirname + '/*'):
        if os.path.isfile(f):
            themes.append(os.path.basename(f))

    for theme in themes:
        if theme != current:
            print('  %s' % theme)
        else:
            print('* %s' % theme)


def use_theme(theme):
    filename = os.path.join(normalize_path(THEME_DIR), theme)
    if not os.path.isfile(filename):
        print_error_and_die('File not found: %s' % filename)
    rc_file = normalize_path('~/.matplotlib/matplotlibrc')

    create_symlink(filename, rc_file)
    print('%s -> %s' % (filename, rc_file))


def main(args):
    if args['list']:
        list_themes()
    elif args['use']:
        use_theme(args['<theme>'])


if __name__ == '__main__':
    args = docopt.docopt(__doc__)
    main(args)
